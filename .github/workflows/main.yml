name: Update Release and Clean Old

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史记录

      - name: Validate TXT files
        run: |
          if [ ! -f ./myproxy.txt ] || [ ! -f ./mydirect.txt ]; then
            echo "Error: TXT files missing!"
            exit 1
          fi

      - name: Delete old git tag (local & remote)
        run: |
          # 删除本地标签
          git tag -d latest || true
          # 删除远程标签
          git push origin :refs/tags/latest || true

      - name: Force push new tag
        run: |
          git tag -f latest
          git push origin latest --force

      - name: Create/Update Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest  # 固定标签名
          release_name: "Latest Release (${GITHUB_SHA:0:7})"
          body: |
            Updated at: ${{ github.event.head_commit.timestamp }}
            Commit: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

      - name: Upload myproxy.txt
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./myproxy.txt
          asset_name: myproxy.txt

      - name: Upload mydirect.txt
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./mydirect.txt
          asset_name: mydirect.txt

      - name: Delete old releases
        run: |
          # 安装 GitHub CLI
          sudo apt-get install -y gh

          # 认证
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

          # 获取所有 releases (JSON 格式)
          releases=$(gh api repos/${{ github.repository }}/releases)

          # 解析并删除旧 releases (保留最新的2个)
          echo "$releases" | jq -r '.[2:] | .[].id' | while read id; do
            gh api repos/${{ github.repository }}/releases/$id -X DELETE
            echo "Deleted release ID: $id"
          done
